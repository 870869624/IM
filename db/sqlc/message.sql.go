// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  content, from_user_id,to_user_id, group_id,m_type
) VALUES (
  $1, $2,$3,$4,$5
)
RETURNING id, content, from_user_id, to_user_id, group_id, m_type, networktatus, created_at
`

type CreateMessageParams struct {
	Content    sql.NullString `json:"content"`
	FromUserID string         `json:"from_user_id"`
	ToUserID   sql.NullString `json:"to_user_id"`
	GroupID    sql.NullString `json:"group_id"`
	MType      int32          `json:"m_type"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Content,
		arg.FromUserID,
		arg.ToUserID,
		arg.GroupID,
		arg.MType,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.FromUserID,
		&i.ToUserID,
		&i.GroupID,
		&i.MType,
		&i.Networktatus,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageToGroup = `-- name: GetMessageToGroup :many
SELECT content, from_user_id, group_id, m_type FROM messages
WHERE group_id = $1
`

type GetMessageToGroupRow struct {
	Content    sql.NullString `json:"content"`
	FromUserID string         `json:"from_user_id"`
	GroupID    sql.NullString `json:"group_id"`
	MType      int32          `json:"m_type"`
}

func (q *Queries) GetMessageToGroup(ctx context.Context, groupID sql.NullString) ([]GetMessageToGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageToGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageToGroupRow{}
	for rows.Next() {
		var i GetMessageToGroupRow
		if err := rows.Scan(
			&i.Content,
			&i.FromUserID,
			&i.GroupID,
			&i.MType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageToUser = `-- name: GetMessageToUser :many
SELECT content, from_user_id, to_user_id, m_type FROM messages
WHERE to_user_id = $1
`

type GetMessageToUserRow struct {
	Content    sql.NullString `json:"content"`
	FromUserID string         `json:"from_user_id"`
	ToUserID   sql.NullString `json:"to_user_id"`
	MType      int32          `json:"m_type"`
}

func (q *Queries) GetMessageToUser(ctx context.Context, toUserID sql.NullString) ([]GetMessageToUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageToUser, toUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageToUserRow{}
	for rows.Next() {
		var i GetMessageToUserRow
		if err := rows.Scan(
			&i.Content,
			&i.FromUserID,
			&i.ToUserID,
			&i.MType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
