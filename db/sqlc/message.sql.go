// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  content, from_user_account,to_user_account, group_account,m_type, networkstatus
) VALUES (
  $1, $2,$3,$4,$5, $6
)
RETURNING id, content, from_user_account, to_user_account, group_account, m_type, networkstatus, created_at
`

type CreateMessageParams struct {
	Content         string `json:"content"`
	FromUserAccount string `json:"from_user_account"`
	ToUserAccount   string `json:"to_user_account"`
	GroupAccount    string `json:"group_account"`
	MType           int32  `json:"m_type"`
	Networkstatus   int32  `json:"networkstatus"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Content,
		arg.FromUserAccount,
		arg.ToUserAccount,
		arg.GroupAccount,
		arg.MType,
		arg.Networkstatus,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.FromUserAccount,
		&i.ToUserAccount,
		&i.GroupAccount,
		&i.MType,
		&i.Networkstatus,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageToGroup = `-- name: GetMessageToGroup :many
SELECT content, from_user_account, group_account, m_type, networkstatus FROM messages
WHERE group_account = $1
`

type GetMessageToGroupRow struct {
	Content         string `json:"content"`
	FromUserAccount string `json:"from_user_account"`
	GroupAccount    string `json:"group_account"`
	MType           int32  `json:"m_type"`
	Networkstatus   int32  `json:"networkstatus"`
}

func (q *Queries) GetMessageToGroup(ctx context.Context, groupAccount string) ([]GetMessageToGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageToGroup, groupAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageToGroupRow{}
	for rows.Next() {
		var i GetMessageToGroupRow
		if err := rows.Scan(
			&i.Content,
			&i.FromUserAccount,
			&i.GroupAccount,
			&i.MType,
			&i.Networkstatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageToUser = `-- name: GetMessageToUser :many
SELECT content, from_user_account, to_user_account, m_type FROM messages
WHERE to_user_account = $1
`

type GetMessageToUserRow struct {
	Content         string `json:"content"`
	FromUserAccount string `json:"from_user_account"`
	ToUserAccount   string `json:"to_user_account"`
	MType           int32  `json:"m_type"`
}

func (q *Queries) GetMessageToUser(ctx context.Context, toUserAccount string) ([]GetMessageToUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageToUser, toUserAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageToUserRow{}
	for rows.Next() {
		var i GetMessageToUserRow
		if err := rows.Scan(
			&i.Content,
			&i.FromUserAccount,
			&i.ToUserAccount,
			&i.MType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
