// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: friend.sql

package db

import (
	"context"
)

const createFriend = `-- name: CreateFriend :one
INSERT INTO friends (
  f_user_account, t_user_account
) VALUES (
  $1, $2
)
RETURNING id, f_user_account, t_user_account, created_at
`

type CreateFriendParams struct {
	FUserAccount string `json:"f_user_account"`
	TUserAccount string `json:"t_user_account"`
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, createFriend, arg.FUserAccount, arg.TUserAccount)
	var i Friend
	err := row.Scan(
		&i.ID,
		&i.FUserAccount,
		&i.TUserAccount,
		&i.CreatedAt,
	)
	return i, err
}

const getFriend = `-- name: GetFriend :one
SELECT id, f_user_account, t_user_account, created_at FROM friends
where t_user_account = $1 and f_user_account = $2
`

type GetFriendParams struct {
	TUserAccount string `json:"t_user_account"`
	FUserAccount string `json:"f_user_account"`
}

func (q *Queries) GetFriend(ctx context.Context, arg GetFriendParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriend, arg.TUserAccount, arg.FUserAccount)
	var i Friend
	err := row.Scan(
		&i.ID,
		&i.FUserAccount,
		&i.TUserAccount,
		&i.CreatedAt,
	)
	return i, err
}

const listFriend = `-- name: ListFriend :many
SELECT id, f_user_account, t_user_account, created_at FROM friends
where f_user_account = $1
ORDER BY t_user_account LIMIT $2 OFFSET $3
`

type ListFriendParams struct {
	FUserAccount string `json:"f_user_account"`
	Limit        int32  `json:"limit"`
	Offset       int32  `json:"offset"`
}

func (q *Queries) ListFriend(ctx context.Context, arg ListFriendParams) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, listFriend, arg.FUserAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friend{}
	for rows.Next() {
		var i Friend
		if err := rows.Scan(
			&i.ID,
			&i.FUserAccount,
			&i.TUserAccount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
