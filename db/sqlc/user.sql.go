// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, hashed_password,phone, account,token
) VALUES (
  $1, $2,$3,$4,$5
)
RETURNING id, username, hashed_password, phone, account, token, account_changed_at, phone_changed_at, username_changed_at, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Phone          string `json:"phone"`
	Account        string `json:"account"`
	Token          string `json:"token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Phone,
		arg.Account,
		arg.Token,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Phone,
		&i.Account,
		&i.Token,
		&i.AccountChangedAt,
		&i.PhoneChangedAt,
		&i.UsernameChangedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, phone, account, token, account_changed_at, phone_changed_at, username_changed_at, password_changed_at, created_at FROM users
WHERE account = $1
`

func (q *Queries) GetUser(ctx context.Context, account string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, account)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Phone,
		&i.Account,
		&i.Token,
		&i.AccountChangedAt,
		&i.PhoneChangedAt,
		&i.UsernameChangedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, hashed_password, phone, account, token, account_changed_at, phone_changed_at, username_changed_at, password_changed_at, created_at FROM users
ORDER BY account
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Phone,
			&i.Account,
			&i.Token,
			&i.AccountChangedAt,
			&i.PhoneChangedAt,
			&i.UsernameChangedAt,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Username)
	return err
}
